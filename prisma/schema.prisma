// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  password      String
  profileImage  String?
  emailVerified Boolean       @default(false)
  bankAccounts  BankAccount[]
  categories    Category[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Transaction   Transaction[]

  @@map("users")
}

model BankAccount {
  id                String        @id @default(uuid())
  name              String        @default("Conta Principal")
  color             String        @default("#808080")
  icon              String        @default("")
  balance           Int           @default(0)
  currency          String        @default("BRL")
  include_in_budget Boolean       @default(true)
  userId            String
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bank_accounts")
}

model Category {
  id           String        @id @default(uuid())
  name         String
  description  String?
  color        String        @default("#808080")
  icon         String        @default("landmark")
  type         String // 'income' or 'expense'
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Transaction {
  id          String   @id @default(uuid())
  amount      Int
  description String?
  date        DateTime @default(now())
  type        String // 'income' or 'expense' or 'credit'

  categoryId    String
  category      Category    @relation(fields: [categoryId], references: [id])
  bankAccountId String
  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transactions")
}
